<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-18T14:33:51+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Place</title><subtitle></subtitle><entry><title type="html">Chapter 3 - Section 2 added !</title><link href="http://localhost:4000/course/update/2020/10/29/Welcome.html" rel="alternate" type="text/html" title="Chapter 3 - Section 2 added !" /><published>2020-10-29T08:40:12+01:00</published><updated>2020-10-29T08:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/10/29/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/10/29/Welcome.html">&lt;p&gt;The Web materials and resources of Chapter 3 - Section 2 are listed here.&lt;/p&gt;

&lt;h1 id=&quot;chapter-3-web-services-core-functionality-and-standards&quot;&gt;Chapter 3, Web Services-Core functionality and standards&lt;/h1&gt;

&lt;h1 id=&quot;section-2-implementing-web-services&quot;&gt;&lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_3section2&quot;&gt;Section 2, Implementing Web services&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&quot;section-synopsis&quot;&gt;Section synopsis&lt;/h3&gt;

&lt;p&gt;In this section, we will explore Web services implementation approaches and various available APIs. By the end of this section, students will come to know about service implementation,testing, publication and invocation platforms.&lt;/p&gt;

&lt;h3 id=&quot;before-lecture&quot;&gt;Before lecture&lt;/h3&gt;

&lt;p&gt;üìö &lt;strong&gt;ToRead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Objective :  Implementing Web service - Learning &lt;a href=&quot;https://www.w3.org/TR/wsdl20/&quot;&gt;WSDL&lt;/a&gt; standard.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/Web%20Service%20Implementation%20and%20Composition%20Techniques.pdf&quot;&gt;Web Service Implementation and Composition Techniques 1st ed. 2017 Edition, springer&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 2.&lt;/strong&gt; Web Services ‚Äì SOAP and WSDL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/Web%20services%20%20principles%20and%20technology.pdf&quot;&gt;Web services : principles and technology&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 5.&lt;/strong&gt; Describing Web services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/PHPWebServices2ndEdition.pdf&quot;&gt;PhP web services, second edition, 2016&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 7.&lt;/strong&gt; RPC and SOAP Services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/PHPWebServices2ndEdition.pdf&quot;&gt;Master Php 7, 2017&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 11.&lt;/strong&gt; Building Services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/Building%20Web%20Services%20with%20Java%20Making%20Sense%20of%20XML,%20SOAP,%20WSDL.pdf&quot;&gt;Building Web Services with Java: Making Sense of XML, SOAP, WSDL, and UDDI 2nd Edition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 4.&lt;/strong&gt; Describing Web Services&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Chap 5.&lt;/strong&gt; Implementing Web Services with Apache Axis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üìù &lt;strong&gt;ToDo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The objective of this section, is to get familiarized with several Web service implementation platforms in various programming languages.&lt;/p&gt;

&lt;h4 id=&quot;running-lecture-demos&quot;&gt;Running lecture demos:&lt;/h4&gt;

&lt;p&gt;In order to implement Web services either in Bottom-Up or Top-Down Web services, you will need, a service container and a SOAP engine. Web services examples of this course are deployed in Apache, and are written in Php.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To run demo Web services  provided with this lecture, you need first to clone the following repository on your machine: &lt;a href=&quot;https://github.com/neilabenlakhal/webservices2.git&quot;&gt;https://github.com/neilabenlakhal/webservices2.git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, you need the following tools installed :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ampps.com/downloads&quot;&gt;AMPPS&lt;/a&gt; is a MAMP, WAMP and LAMP software stack from Softaculous enabling Apache, Mysql, MongoDB, PHP, Perl, and Python. This includes everything you need for website development. Start developing your website from open source web applications or just start writing code yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sourceforge.net/projects/nusoap/&quot;&gt;NUSOAP&lt;/a&gt; and SOAP.dll: PhP comes with a Top-Down enabling Web services implementation API (Soap.dll). But for implementing Web services along the Bottom-Up approach, we will be using &lt;a href=&quot;https://sourceforge.net/projects/nusoap/&quot;&gt;NUSOAP&lt;/a&gt;, a rewrite of SOAPx4, provided by NuSphere and Dietrich Ayala. It is a set of PHP classes - no PHP extensions required - that allow developers to create and consume Web services based on SOAP 1.1, WSDL 1.1 and HTTP 1.0/1.1. Please download NUSOAP, unzip it and add it to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; folder in your installed AMPPS platform.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;testing-others-web-services-implementation-platforms--&quot;&gt;Testing others Web services implementation platforms  :&lt;/h4&gt;

&lt;p&gt;Every programming language has one or several APIs  to implement Web services that support SOAP based communication. for this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToDo3_2&lt;/code&gt; section, you are highly advised to do the following Lab exercises, to get familiarized with implementing Web services in Java and .NET.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Implementing web services in JAVA&lt;/strong&gt;: Java API for XML Web Services (JAX-WS) is a technology for building web services and clients that communicate using XML. There are currently many platforms that implement it, Apache CXF and Apache Axis 2 are two implementations of JAX-WS.&lt;/p&gt;

    &lt;p&gt;-&lt;a href=&quot;http://axis.apache.org/axis2/java/core/&quot;&gt;Apache Axis2&lt;/a&gt; project:  is a Java-based implementation of both the client and server sides of the Web services equation. Apache Axis2 provides a complete object model and a modular architecture that makes it easy to add functionality and support for new Web services-related specifications and recommendations. Axis2 enables you to easily perform the following tasks:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Send SOAP messages.&lt;/li&gt;
      &lt;li&gt;Receive and process SOAP messages.&lt;/li&gt;
      &lt;li&gt;Create a Web service out of a plain Java class.&lt;/li&gt;
      &lt;li&gt;Create implementation classes for both the server and client using WSDL.&lt;/li&gt;
      &lt;li&gt;Easily retrieve the WSDL for a service. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;-&lt;a href=&quot;https://cxf.apache.org/&quot;&gt;Apache CXF&lt;/a&gt;: is an open source services framework. CXF helps you build and develop services using frontend programming APIs, like JAX-WS (SOAP) and JAX-RS (REST). These services can speak a variety of protocols such as SOAP, XML/HTTP, RESTful HTTP, or CORBA and work over a variety of transports such as HTTP, JMS or JBI.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Implementing web services with Windows Communication Foundation (WCF):&lt;/strong&gt; WCF is a framework for building service-oriented (SOAP/REST) applications. Using WCF, you can send data as asynchronous messages from one service endpoint to another. A service endpoint can be part of a continuously available service hosted by IIS, or it can be a service hosted in an application. An endpoint can be a client of a service that requests data from a service endpoint. The messages can be as simple as a single character or word sent as XML, or as complex as a stream of binary data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Practical Exercises :&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Lab Exercise 00 : Creating a WSDL File. Many tools can be used to create a WSDL file. We can generate it using NUSOAP, &lt;a href=&quot;https://www.phpclasses.org/package/3509-PHP-Generate-WSDL-from-PHP-classes-code.html&quot;&gt;PhP2WSDL&lt;/a&gt; or WSDL2JAVA, or we can use tools like Eclipse. This is a tutorial about &lt;a href=&quot;https://help.eclipse.org/2020-09/index.jsp?topic=%2Forg.eclipse.wst.wsdl.ui.doc.user%2Ftasks%2Ftcrtwsdl.html&quot;&gt;creating WSDL in Eclipse&lt;/a&gt;. You can also use this &lt;a href=&quot;https://crunchify.com/create-sample-wsdl-in-eclipse-and-generate-client/&quot;&gt;tutorial&lt;/a&gt; as additional explanation.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lab Exercise 01 : Developing Simple Web Services with Apache CXF and Maven from Chap 2 of  &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/Web%20Service%20Implementation%20and%20Composition%20Techniques.pdf&quot;&gt;Web Service Implementation and Composition Techniques 1st ed. 2017 Edition, springer&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lab Exercise 02: &lt;a href=&quot;https://www.benchresources.net/apache-axis2-jax-ws-based-web-service-using-bottom-up-approach&quot;&gt;Apache Axis2 JAX-WS based Web Service using Bottom-Up approach&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lab Exercise 03: &lt;a href=&quot;https://www.c-sharpcorner.com/article/web-services-using-c-sharp-creating-web-services/&quot;&gt;Web Services Using C# - Creating Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lab Exercise 04: &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/dotnet/csharp/write-web-service&quot;&gt;Write a web service by using Visual C# .NET&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web service testing :&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to test web services we will be using :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.soapui.org/downloads/soapui/&quot;&gt;SOAPUI the open source version&lt;/a&gt;,  an API (SOAP/REST) testing tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;after-lecture-&quot;&gt;After lecture :&lt;/h3&gt;

&lt;p&gt;üíª &lt;strong&gt;ToCode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The objective of this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode3_2&lt;/code&gt; section is to create a Web services composition &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(WSC)&lt;/code&gt; composed of two(2) Web services : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt;: is a Web service you have to implement yourself.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;: is a Web service you have to choose from internet, then, write a client against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt; are to be invoked sequentially by a Web interface transparently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample scenarios you can consider :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt;  makes a fictive travel reservation for a customer. The total amount will be returned in TND. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt; will provide a reservation confirmation with the total amount in  another currency, for instance USD.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; lets a user choose a preferred vacation destination, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;, will provide the user with the weather forecast, for the designated destination and date.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Step 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Implement a SOAP web service (bottom-up approach)‚Äì we will call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt;.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write a  PHP web service using NUSOAP library. Your web service should have at least (2)two methods. one of them having a table as input/output. Your generated WSDL file should define at least one complex data type.&lt;/li&gt;
  &lt;li&gt;Write a client in PHP to your Web service (one of the (2)two methods).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implement a SOAP web service (Top-down approach) ‚Äì we will call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS-TD&lt;/code&gt;.
    - Write another PhP web services. Your web service should have one method.&lt;br /&gt;
    - Write a client in PHP to your Web service.&lt;br /&gt;
    - Generate your Web service contract using php2WSDL.&lt;br /&gt;
    - Create another client for your web service in another programming language of your choice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Step 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Search for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt; : it should supports SOAP-based invocation. Test the web service and write a client.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Step 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Write a client for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;. 
Hint: The output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; must be an input to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Step 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt; composition using a Web interface.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What to submit ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-Create a folder and name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode3_2&lt;/code&gt;. Create four(4) subfolders named : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS-TD&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSC&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Store the source code, of the WS and the client of each WS. Add  SOAPUI tests of you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS-TD&lt;/code&gt; (print screens).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Store the source code of the composition in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSC&lt;/code&gt; with print screen of its execution interface with results. You may add an explanatory description of your composition with each web service methods, input and output parameters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Push your  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode3_2&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GIT&lt;/code&gt; repository.&lt;/li&gt;
  &lt;li&gt;Send the following on Microsoft Teams : Link of your git repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;p&gt;Several web services WSDL files :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://developers.google.com/adwords/api/docs/guides/call-structure&quot;&gt;Google Ads&lt;/a&gt; - 
 &lt;a href=&quot;https://adwords.google.com/api/adwords/cm/v201809/CampaignService?wsdl&quot;&gt;https://adwords.google.com/api/adwords/cm/v201809/CampaignService?wsdl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://developer.ebay.com&quot;&gt;EbaY&lt;/a&gt; - 
 &lt;a href=&quot;http://developer.ebay.com/webservices/latest/ebaySvc.wsdl&quot;&gt;http://developer.ebay.com/webservices/latest/ebaySvc.wsdl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó PayPAL - &lt;a href=&quot;https://www.paypalobjects.com/wsdl/paypalsvc.wsdl&quot;&gt;https://www.paypalobjects.com/wsdl/paypalsvc.wsdl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://www.nws.noaa.gov/xml/&quot;&gt;National Digital Forecast Database (NDFD)&lt;/a&gt; - 
&lt;a href=&quot;http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl&quot;&gt;http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó UPS Developer Kit APIs - &lt;a href=&quot;https://www.ups.com/cd/en/help-center/technology-support/developer-resource-center/ups-developer-kit/about.page?&quot;&gt;https://www.ups.com/cd/en/help-center/technology-support/developer-resource-center/ups-developer-kit/about.page?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://flightaware.com/commercial/flightxml/v3/documentation.rvt&quot;&gt;Flightaware&lt;/a&gt; - 
&lt;a href=&quot;http://flightxml.flightaware.com/soap/FlightXML3/wsdl&quot;&gt;http://flightxml.flightaware.com/soap/FlightXML3/wsdl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several Web services web sites :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://www.programmableweb.com/&quot;&gt;API directory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://www.free-web-services.com/&quot;&gt;A directory of free web services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://explore.postman.com/templates&quot;&gt;Collection of public APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://www.xignite.com/&quot;&gt;Financial web services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://www.cdyne.com&quot;&gt;SMS, voice, phone and address verification APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://developer.ebay.com/devzone/shopping/docs/Concepts/ShoppingAPIGuide.html&quot;&gt;Ebay shopping API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://sofa.uqam.ca/soda/webservices.php&quot;&gt;List of weather related and financial web services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-videos-&quot;&gt;Chapter Videos :&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/6cwVPO2pYkc&quot;&gt;Youtube video lecture Chapter 3 - Section 2 : Part 1&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/osNCyERKmtc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/4UEHxG1HHvo&quot;&gt;Youtube video lecture Chapter 3 - Section 2 : Part 2&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hhUbnaUwgu4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/0KyjCYbVdD4&quot;&gt;Youtube video lecture Chapter 3 - Section 2 : Part 3&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/LlIMhrr5nyg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/l2bBYjHcAtM&quot;&gt;Youtube video lecture Chapter 3 - Section 2 : Part 4&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xuKV7cVw0e4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of Chapter 3 - Section 2 are listed here.</summary></entry><entry><title type="html">Chapter 3 -Section 1 added !</title><link href="http://localhost:4000/course/update/2020/10/13/Welcome.html" rel="alternate" type="text/html" title="Chapter 3 -Section 1 added !" /><published>2020-10-13T08:40:12+01:00</published><updated>2020-10-13T08:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/10/13/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/10/13/Welcome.html">&lt;p&gt;The Web materials and resources of Chapter 3 are listed here.&lt;/p&gt;

&lt;h1 id=&quot;chapter-3-web-services-core-functionality-and-standards&quot;&gt;&lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_3&quot;&gt;Chapter 3, Web Services-Core functionality and standards&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&quot;section-1-web-services-core-standards&quot;&gt;Section 1 Web services-core standards&lt;/h1&gt;

&lt;h2 id=&quot;chapter-synopsis&quot;&gt;Chapter synopsis&lt;/h2&gt;

&lt;p&gt;Chapter 3 will go through the WS-* standards, technologies and APIs that are commonly used to implement a service-oriented application. Bottom-up and top-down service implementations approaches are explored. This chapter introduces also two service integration and composition techniques, namely service orchestration and choreography for composing individual services so as to achieve useful business processes. By the end of this chapter, students will come to know about service implementation,testing, discovery, publication and invocation platforms. Basic concepts of orchestration and choreography, with orchestration and choreography readily available orchestration platforms and workflow engines like BPEL are also explained.&lt;/p&gt;

&lt;h2 id=&quot;before-lecture&quot;&gt;Before lecture&lt;/h2&gt;

&lt;p&gt;üìö &lt;strong&gt;ToRead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Objective : prepare web services(SOAP) implementation platforms&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/XML%20Visual%20QuickStart%20Guide%202nd%20Edition.pdf&quot;&gt;XML Visual quick start guide, 2nd edition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Part 17.&lt;/strong&gt; Ajax, RSS, SOAP, and More&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/Web%20services%20%20principles%20and%20technology.pdf&quot;&gt;Web services : principles and technology&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 4.&lt;/strong&gt; SOAP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/Building%20Web%20Services%20with%20Java%20Making%20Sense%20of%20XML,%20SOAP,%20WSDL.pdf&quot;&gt;Building Web Services with Java: Making Sense of XML, SOAP, WSDL, and UDDI 2nd Edition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap .&lt;/strong&gt; SOAP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üìù &lt;strong&gt;ToDo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To go through the lifecycle of a web service, we will need several tools that you should install on your machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;** Web service implementation **&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to implement web services either in Bottom-up or top-down web services, you will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ampps.com/downloads&quot;&gt;AMPPS&lt;/a&gt; is a MAMP, WAMP and LAMP software stack from Softaculous enabling Apache, Mysql, MongoDB, PHP, Perl, and Python. This includes everything you need for website development. Start developing your website from open source web applications or just start writing code yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PhP comes with a top-down enabling web services implementation API. But for implementing web services along the bottom-up approach, we will be using &lt;a href=&quot;https://sourceforge.net/projects/nusoap/&quot;&gt;NUSOAP&lt;/a&gt; : NuSOAP is a rewrite of SOAPx4, provided by NuSphere and Dietrich Ayala. It is a set of PHP classes - no PHP extensions required - that allow developers to create and consume web services based on SOAP 1.1, WSDL 1.1 and HTTP 1.0/1.1. Please download NUSOAP, unzip it and add it to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; folder in your installed AMPPS platform.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;** Web service testing **&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to test web services we will be using :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.soapui.org/downloads/soapui/&quot;&gt;SOAPUI the open source version&lt;/a&gt;:  an API (SOAP/REST) testing tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;after-lecture-&quot;&gt;After lecture :&lt;/h2&gt;

&lt;p&gt;üíª &lt;strong&gt;ToCode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clone the following client on your machine : https://github.com/neilabenlakhal/webservice1.git&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install required softwares (SOAPUI, AMPPS, NUSOAP).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test the code on your machine and make sure it is working properly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOAPUI&lt;/code&gt; test of several SOAP web services (see additional resources section).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose one SOAP web service and test it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOAPUI&lt;/code&gt; then,  write a client to call it (write a PHP client using NUSOAP class).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push your Web service client code and  with print screens of your SOAPUI tests to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GIT&lt;/code&gt; repository.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send the following on Microsoft Teams :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Link of your Web service client (git repository)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Print screens of SOAPUI tests (successful test + faulty test)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preferred-text-editor&quot;&gt;Preferred text editor:&lt;/h2&gt;

&lt;p&gt;It is highly recommended to use :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;üîó&lt;a href=&quot;https://code.visualstudio.com/docs/setup/setup-overview&quot;&gt;Visual studio code&lt;/a&gt;  with &lt;a href=&quot;https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/&quot;&gt;RedHat extension&lt;/a&gt;. This extension will help you with XML validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;p&gt;Several web services web sites :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://www.programmableweb.com/&quot;&gt;API directory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://www.free-web-services.com/&quot;&gt;A directory of free web services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://explore.postman.com/templates&quot;&gt;Collection of public APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://www.xignite.com/&quot;&gt;Financial web services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://www.cdyne.com&quot;&gt;SMS, voice, phone and address verification APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;https://developer.ebay.com/devzone/shopping/docs/Concepts/ShoppingAPIGuide.html&quot;&gt;Ebay shopping API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó &lt;a href=&quot;http://sofa.uqam.ca/soda/webservices.php&quot;&gt;List of weather related and financial web services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-videos-&quot;&gt;Chapter Videos :&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/6cwVPO2pYkc&quot;&gt;Youtube video lecture Section 1: Chapter 2 review&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6cwVPO2pYkc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/4UEHxG1HHvo&quot;&gt;Youtube video lecture Section 2: service properties (part 1)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4UEHxG1HHvo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/0KyjCYbVdD4&quot;&gt;Youtube video lecture Section 2: service properties (part 2)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0KyjCYbVdD4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/l2bBYjHcAtM&quot;&gt;Youtube video lecture Section 3: Web service Demo (part 1)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/l2bBYjHcAtM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/GteQ3IEmtWE&quot;&gt;Youtube video lecture Section 3: Web service Demo (part 2)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GteQ3IEmtWE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/JUpKPmB2Wew&quot;&gt;Youtube video lecture Section 4: XML review- Namespaces - SOAP protocol&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JUpKPmB2Wew&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/WWZ6qfjE6Sk&quot;&gt;Youtube video lecture Section 5: Web service NUSOAP client (part 1)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WWZ6qfjE6Sk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/jQUvkrsYZd8&quot;&gt;Youtube video lecture Section 6: Web service NUSOAP client (part 2)&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jQUvkrsYZd8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of Chapter 3 are listed here.</summary></entry><entry><title type="html">Chapter 2 added !</title><link href="http://localhost:4000/course/update/2020/09/23/Welcome.html" rel="alternate" type="text/html" title="Chapter 2 added !" /><published>2020-09-23T20:40:12+01:00</published><updated>2020-09-23T20:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/09/23/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/09/23/Welcome.html">&lt;p&gt;The Web materials and resources of Chapter 2 are listed here.&lt;/p&gt;

&lt;h1 id=&quot;chapter-2-service-oriented-architecture-soa&quot;&gt;&lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_2&quot;&gt;Chapter 2, Service-Oriented Architecture (SOA)&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;chapter-synopsis&quot;&gt;Chapter synopsis&lt;/h2&gt;

&lt;p&gt;Demystifies the popular service-oriented architecture (SOA) patterns that produce service-oriented applications. This chapter provides details on the principles and key concepts of SOA. From this chapter, students will understand the purpose of SOA, the technologies and protocols (web services) used for SOA, and the typical use cases of SOA. Ultimately, students will get to know the deployment difficulties associated with SOA applications.&lt;/p&gt;

&lt;h2 id=&quot;before-lecture&quot;&gt;Before lecture&lt;/h2&gt;

&lt;p&gt;üìö &lt;strong&gt;ToRead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Objective : Get familiarized with XML, XSD (Review)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/XML%20Visual%20QuickStart%20Guide%202nd%20Edition.pdf&quot;&gt;XML Visual quick start guide, 2nd edition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Part 1.&lt;/strong&gt; XML&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Part 4.&lt;/strong&gt; XML schema&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Part 5.&lt;/strong&gt; Namespaces&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToRead/Web%20services%20%20principles%20and%20technology.pdf&quot;&gt;Web services : principles and technology&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 1.&lt;/strong&gt; Web services basics&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Chap 3.&lt;/strong&gt; Brief overview of XML&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/2020-2021Lecture/SOC/Chapter_2/ToRead/Web%20Services,%20Service-Oriented%20Architectures,%20and%20Cloud%20Computing.pdf&quot;&gt;Web Services, Service-Oriented Architectures, and Cloud Computing 2nd Edition 2013&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 3.&lt;/strong&gt; Web Services and Service-Oriented Architectures.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üìù &lt;strong&gt;ToDo&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Learning Objectives:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Understand the rules of XML syntax&lt;/li&gt;
      &lt;li&gt;Author an XML document&lt;/li&gt;
      &lt;li&gt;XML Namespaces&lt;/li&gt;
      &lt;li&gt;XML Schema Core Concepts&lt;/li&gt;
      &lt;li&gt;Built-in Datatypes&lt;/li&gt;
      &lt;li&gt;User-defined Simple Types&lt;/li&gt;
      &lt;li&gt;Complex Types&lt;/li&gt;
      &lt;li&gt;Validate an XML document against an existing schema&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access the following resources and get familiarized with XML and XML schema by doing the following training:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Altova web site : &lt;a href=&quot;http://altova-aot.s3.amazonaws.com/Altova%20XML%20Schema%201.1%20Technology/player.html&quot;&gt;Altova XML schema Online Training.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Help yourself with lhe following lecture slides.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/Old_Stuff/2018-2019Lecture/SOC/Slides/0-XML%20DTD%20et%20Schema%20XML.pdf&quot;&gt;Pdf Slides (old lecture content(fr).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;after-lecture-&quot;&gt;After lecture :&lt;/h2&gt;

&lt;p&gt;üíª &lt;strong&gt;ToCode&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Access the following &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_2/ToCode/README.md&quot;&gt;XML Assignments&lt;/a&gt; and submit them on microsoft teams.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What to submit ?&lt;/li&gt;
  &lt;li&gt;Create an xml file for every exercise. Put all files in a folder.&lt;/li&gt;
  &lt;li&gt;Upon finishing your assignment :&lt;/li&gt;
  &lt;li&gt;Name your working directory as &lt;strong&gt;ToCode2&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Push the &lt;strong&gt;toCode2&lt;/strong&gt; Folder content to your Github account.&lt;/li&gt;
  &lt;li&gt;Send me the repository URL using microsoft team (write it down in a .txt file) or send me a share repository invite to my e-mail : neila.benlakhal@gmail.com.&lt;/li&gt;
  &lt;li&gt;‚ö† &lt;em&gt;Use your real name as GitHub account&lt;/em&gt;: recommended format : &lt;strong&gt;firstNameLastName&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preferred-text-editor&quot;&gt;Preferred text editor:&lt;/h2&gt;

&lt;p&gt;It is highly recommended to use :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;üîó&lt;a href=&quot;https://code.visualstudio.com/docs/setup/setup-overview&quot;&gt;Visual studio code&lt;/a&gt;  with &lt;a href=&quot;https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/&quot;&gt;RedHat extension&lt;/a&gt;. This extension will help you with XML validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;üîó&lt;a href=&quot;https://www.w3.org/standards/xml/&quot;&gt;XML Technology (W3C).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó&lt;a href=&quot;https://www.w3schools.com/xml/&quot;&gt;W3schools XML tutorials.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó&lt;a href=&quot;http://www.xmlmaster.org/en/article/d01/&quot;&gt;XML Master: (Volume 1-6, volume 10).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó&lt;a href=&quot;http://altova-aot.s3.amazonaws.com/Altova%20XML%20Schema%201.1%20Technology/player.html&quot;&gt;XML Schema 1.1 by Altova.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;üîó&lt;a href=&quot;http://perfectxml.com/FreeLibrary2.asp?s=XML&quot;&gt;PerfectXML.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of Chapter 2 are listed here.</summary></entry><entry><title type="html">Chapter 1 added !</title><link href="http://localhost:4000/course/update/2020/09/22/Welcome.html" rel="alternate" type="text/html" title="Chapter 1 added !" /><published>2020-09-22T20:40:12+01:00</published><updated>2020-09-22T20:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/09/22/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/09/22/Welcome.html">&lt;p&gt;The Web materials and resources of Chapter 1 are listed here.&lt;/p&gt;

&lt;h1 id=&quot;chapter-1--demystifying-software-architecture&quot;&gt;Chapter 1 : &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_1&quot;&gt;Demystifying Software Architecture&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;chapter-synopsis&quot;&gt;Chapter synopsis&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This chapter begins the course by providing a definition of software architecture and lists and details a number of software architecture styles classifications. We will also present different object-oriented distributed computing technologies, such as CORBA, DCOM, and RMI and list their limitations that led to service architectural styles emergence. Several examples of each type of architectural style will be also provided.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;before-lecture&quot;&gt;Before lecture&lt;/h2&gt;

&lt;p&gt;üìö &lt;strong&gt;ToRead&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From : &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_1/ToRead/Software%20Architect‚Äôs%20Handbook.pdf&quot;&gt;Ingeno, Joseph.¬†Software Architect‚Äôs Handbook, Packt Publishing Ltd, 2018.&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 7.&lt;/strong&gt; Software Architecture Patterns.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Chap 8.&lt;/strong&gt; Architecting Modern Applications.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From : &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_1/ToRead/Fundamentals%20of%20Software%20Architecture.pdf&quot;&gt;Richards, Mark. Ford, Neal., Fundamentals of Software Architecture, O‚ÄôReilly. 2020.&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chap 9.&lt;/strong&gt; Foundations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üìù &lt;strong&gt;ToDo&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Objective : Get familiarised with GiT.&lt;/li&gt;
  &lt;li&gt;First you need to create &lt;a href=&quot;http://github.com&quot;&gt;GitHub.com account&lt;/a&gt; : You can use the command line, and install &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt; (the version control software GitHub is built on) or download &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt; or work from Github Web interface.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You need to Learn:  how to create, clone a repository, push, pull add commit modifications to a remote repository, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can use theses resources :&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;üîó Quick reference guides: &lt;a href=&quot;https://training.github.com/&quot;&gt;GitHub Cheat Sheet&lt;/a&gt;, &lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot;&gt;Visual Git Cheat Sheet&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;üîó &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;Git Book v2&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;üîó &lt;a href=&quot;https://www.youtube.com/watch?v=xuB1Id2Wxak&quot;&gt;Edureka Git Tutorial&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;üîó &lt;a href=&quot;https://www.youtube.com/watch?v=SWYqp7iY_Tc&amp;amp;t=193s&quot;&gt;Git &amp;amp; GitHub Crash Course For Beginners&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;after-lecture-&quot;&gt;After lecture :&lt;/h2&gt;

&lt;p&gt;üíª &lt;strong&gt;ToCode&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;a href=&quot;https://github.com/jlord/git-it-electron/releases&quot;&gt;Git-it (Desktop App)&lt;/a&gt; : Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line. It contains a set of challenges for learning Git and GitHub‚Äîby using real Git and GitHub. You‚Äôll be learning Git command lines and GitHub which means when you finish all of the challenges you‚Äôll have real repositories on your GitHub account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What to submit ?&lt;/p&gt;

    &lt;p&gt;Upon finishing the challenges, submit :&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A print screen of the Git-it desktop App indicating that you have done all the challenges and&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A print screen of your Github created repository.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;‚ö† &lt;em&gt;Use your real name as GitHub account&lt;/em&gt;: recommended format : firstNameLastName&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preferred-text-editor&quot;&gt;Preferred text editor:&lt;/h2&gt;

&lt;p&gt;It is highly recommended to use :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;üîó&lt;a href=&quot;https://code.visualstudio.com/docs/setup/setup-overview&quot;&gt;Visual studio code&lt;/a&gt; as it supports multiple extensions we will be using throughout this course.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;üîó&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; can also be used as it comes with basic Git and GitHub integration built in.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-resources-&quot;&gt;Additional resources :&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/git-and-github-learning-resources&quot;&gt;Git and GitHub learning resources&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://try.github.io/&quot;&gt;Resources to learn Git&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of Chapter 1 are listed here.</summary></entry><entry><title type="html">Chapter 0: course Intro added !</title><link href="http://localhost:4000/course/update/2020/09/20/Welcome.html" rel="alternate" type="text/html" title="Chapter 0: course Intro added !" /><published>2020-09-20T17:40:12+01:00</published><updated>2020-09-20T17:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/09/20/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/09/20/Welcome.html">&lt;p&gt;The Web materials and resources of Chapter_0 are listed here.&lt;/p&gt;

&lt;h1 id=&quot;chapter-0--course-introduction&quot;&gt;Chapter 0 : &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_0&quot;&gt;Course Introduction&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;chapter-synopsis&quot;&gt;Chapter synopsis&lt;/h2&gt;

&lt;p&gt;This chapter introduces the course and gives information about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Course platforms&lt;/li&gt;
  &lt;li&gt;Grading&lt;/li&gt;
  &lt;li&gt;Assignments&lt;/li&gt;
  &lt;li&gt;Class Attendance policies&lt;/li&gt;
  &lt;li&gt;Textbooks and references&lt;/li&gt;
  &lt;li&gt;Tools and homework submission&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h2&gt;

&lt;p&gt;Course syllabus can be downloaded from &lt;a href=&quot;https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Syllabus_SOC2021NeilaBenLakhal.pdf&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-tentative-schedule&quot;&gt;A tentative schedule&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Week&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 1&lt;/td&gt;
      &lt;td&gt;Course  Introduction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 2&lt;/td&gt;
      &lt;td&gt;Chap 1.  (Software architectural styles)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 3&lt;/td&gt;
      &lt;td&gt;Chap 2. (SOA principles, Key actors, Service properties, Lifecycle)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 4&lt;/td&gt;
      &lt;td&gt;Chap 3. (Demos, SOAP, Bottom-up WS implementation,  Demos, Testing)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 5&lt;/td&gt;
      &lt;td&gt;Chap 3. (WSDL, Top-down WS implementation, Messaging)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 6&lt;/td&gt;
      &lt;td&gt;Chap 4. (REST principles HTTP verbs, Demos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 7&lt;/td&gt;
      &lt;td&gt;Mid-term exam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 8&lt;/td&gt;
      &lt;td&gt;Chap 5. (MSA principles, elements)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 9&lt;/td&gt;
      &lt;td&gt;Chap 6. (Docker)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 10&lt;/td&gt;
      &lt;td&gt;Chap 6. (Docker)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 11&lt;/td&gt;
      &lt;td&gt;Chap 6. (Docker-compose)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 12&lt;/td&gt;
      &lt;td&gt;Chap 6. (Docker swarm)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 13&lt;/td&gt;
      &lt;td&gt;Evaluation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of Chapter_0 are listed here.</summary></entry><entry><title type="html">Service Oriented Computing (SoC) materials !</title><link href="http://localhost:4000/course/update/2020/09/16/Welcome.html" rel="alternate" type="text/html" title="Service Oriented Computing (SoC) materials !" /><published>2020-09-16T20:40:12+01:00</published><updated>2020-09-16T20:40:12+01:00</updated><id>http://localhost:4000/course/update/2020/09/16/Welcome</id><content type="html" xml:base="http://localhost:4000/course/update/2020/09/16/Welcome.html">&lt;p&gt;The Web materials and resources of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020/2021 Service Oriented Computing (SOC)&lt;/code&gt; course at &lt;a href=&quot;http://www.enicarthage.rnu.tn/&quot;&gt;Enicarthage&lt;/a&gt; are listed here.&lt;/p&gt;

&lt;h1 id=&quot;course-overview&quot;&gt;Course overview&lt;/h1&gt;

&lt;p&gt;This course explores an emerging paradigm for enabling distributed systems and applications at scale, Microservices.&lt;/p&gt;

&lt;h1 id=&quot;course-objectives&quot;&gt;Course objectives&lt;/h1&gt;
&lt;p&gt;Lay a strong foundation on which you can build a successful career as a software architect.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Develop a basic understanding of software architectural styles.&lt;/li&gt;
  &lt;li&gt;Develop an in-depth understanding of &lt;strong&gt;service architectures&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Look at what possibilities &lt;strong&gt;service architectures&lt;/strong&gt; brings to the software industry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Participants to this course will be able to look at current and future developments in service architectures with enough background to be able to judge :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which service architecture to choose for your system.&lt;/li&gt;
  &lt;li&gt;How much of a contribution service architectures offer.&lt;/li&gt;
  &lt;li&gt;What is the true potential of service architectures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-this-course-will-cover-&quot;&gt;What this course will cover ?&lt;/h1&gt;

&lt;p&gt;In this lecture, we are mainly concerned with service-based architectural styles. In particular, we will focus on :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Service Oriented Architecture (SOA)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Microservice Architecture (MSA)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Web Programming&lt;/li&gt;
  &lt;li&gt;Database fundamentals&lt;/li&gt;
  &lt;li&gt;Object oriented modeling&lt;/li&gt;
  &lt;li&gt;Students must familiarise themselves with the following technologies :
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GIT&lt;/code&gt; platform.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; standards.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;course-content&quot;&gt;Course content&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 1, Demystifying Software Architecture&lt;/code&gt;, begins the course by providing a definition of software architecture. This chapter lists and details a number of software architecture styles classifications. We will also present different object-oriented distributed computing technologies, such as Common Object Request Broker Architecture (CORBA), the Distributed Component Object Model (DCOM), and Remote Method Invocation (RMI) and list their limitations that led to service architectural styles emergence. Several examples of each type of architectural style will be also provided.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 2, Service-Oriented Architecture (SOA)&lt;/code&gt;, demystifies the popular service-oriented architecture (SOA) patterns that produce service-oriented applications. This chapter provides details on the principles and key concepts of SOA. From this chapter, students will understand the purpose of SOA, the technologies and protocols (web services) used for SOA, and the typical use cases of SOA. Ultimately, students will get to know the deployment difficulties associated with SOA applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 3, Web Services-Core functionality and standards&lt;/code&gt; will go through the WS-* standards, technologies and APIs that are commonly used to implement a service-oriented application. Bottom-up and top-down service implementations approaches are explored. This chapter introduces also two service integration and composition techniques, namely service orchestration and choreography for composing individual services so as to achieve useful business processes. By the end of this chapter, students will come to know about service implementation,testing, discovery, publication and invocation platforms. Basic concepts of orchestration and choreography, with orchestration and choreography readily available orchestration platforms and workflow engineslike BPEL are also explained.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 4 REST Architecture&lt;/code&gt; introduces the concepts related to the programmable Web, shows how HTTP and Web services are related to each other, introduces the principles behind REST Architectural Style, explains how HTTP verbs are used in REST applications and explains the need for RESTFul web services. By the end of this chapter, students will learn the core architectural elements that form a RESTful system and will get introduced to some frameworks and tools that can be used to work with REST.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 5 Microservice Architecture (MSA) : key architectural elements&lt;/code&gt;. The objective of this chapter is to introduce the essentials of MSA as an architecture that breaks down an application into microservices, each of which can be independently, as well as frequently, deployed and thus facilitate continuous delivery of the application to customers. By the end of the chapter, students will understand the need for MSA, how MSA meets the modern business requirements, and typical use cases, benefits, drawbacks, how MSA differs from SOA. Furthermore, students will learn key architectural elements involved in developing an MSA-based application: the communication models of MSA, microservice discovery and the role of the API gate way in discover. He will understand how services interact with one another synchronously and asynchronously using standard architectures, protocols, and message brokers and how clients discover and access different services using service discovery mechanisms and the API gateway.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chapter 6, Docker: a Defacto Platform for Microservices Architecture&lt;/code&gt;.  To leverage the benefits of the microservices architectural style, one needs to use technologies aligned with the characteristics of microservices. Containerization has become a popular deployment format for microservices, and Docker is the leading container platform that packages everything needed to deploy and run microservices (i.e., code, libraries, settings, etc.) .With a lot of advantages, Docker become the best fit to implementing microservices architecture. In this Chapter we will dive deep in Docker to see how Docker can effectively help in leveraging microservices architecture.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;grading&quot;&gt;Grading&lt;/h1&gt;

&lt;p&gt;This course will consist of Lab assignments, quizzes, lectures, chapter readings, presentations and discussions,  ‚Äì each will contribute to your grades.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Chapter reading and Quizzes : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25%&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In-class Labs :  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25%&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;At-home Labs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50%&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Due to the many code examples in the this lecture we opted to maintain the materials in a GitHub repository. The access to the course examples code will be provided with every lecture.&lt;/p&gt;

&lt;h1 id=&quot;workload&quot;&gt;Workload&lt;/h1&gt;

&lt;p&gt;Students should be prepared to spent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2-5 hours&lt;/code&gt; each week. While the course may initially start out demanding fewer hours, towards the middle, it will require more as many coding assignments will be published when we will reach Web service and Docker platform Labs.&lt;/p&gt;

&lt;h1 id=&quot;assignments-submission&quot;&gt;Assignments submission&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Assignments will be due at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11:59PM&lt;/code&gt; on the day of the deadline.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chapter/Paper reading summaries (if requested) are due at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11:59PM&lt;/code&gt; the night before class. Late summaries will not be accepted. Appropriate information on submission tool will be provided later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every Chapter reading might be subject to a quiz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Students are advised to read lecture slides content and download them &lt;strong&gt;before&lt;/strong&gt; the lecture starting time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each unsubmitted Lab assignment results in a loss of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5%&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-attendance-regulations&quot;&gt;Lecture attendance regulations&lt;/h1&gt;

&lt;p&gt;Each student must adhere with the following lecture attendance regulations:&lt;/p&gt;

&lt;h1 id=&quot;before-lecture-time-&quot;&gt;Before lecture time :&lt;/h1&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Download lecture material files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Download Lab assignments files and folders.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Download and install @home necessary software and tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Download and read assigned book chapters and papers. Students must read assigned book chapter before attending lecture.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;during-lecture-&quot;&gt;During Lecture :&lt;/h1&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Don‚Äôt be late. No more than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; minutes delay will be accepted to attend lecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;As major part of the lecture will require an internet access, - specially when we will reach the service invocation and Docker platform chapter, students are advised to have their own internet access as some parts of the course require heavy internet access.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assignments--todo--toread--tocode&quot;&gt;Assignments : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToDo&lt;/code&gt; | &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToRead&lt;/code&gt; | &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Every lecture will be subject to Homework &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToDo&lt;/code&gt;, book Chapters/Papers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToRead&lt;/code&gt; and Labs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToDo&lt;/code&gt; are essential for understanding lecture content and doing in-class labs. e.g., prerequisite tools installation, platform learning‚Ä¶ They must be done before attending the lecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToRead&lt;/code&gt; are book chapters and papers to read before attending course. They are subject to quizzes and sum-up to be done during the coming lecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToCode&lt;/code&gt; are Labs to be submitted after the lecture. Submission process and deadlines are to be defined (TBD) with every Lab.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;textbooks&quot;&gt;Textbooks&lt;/h3&gt;

&lt;p&gt;Several textbooks are required for this class. They are made available online on the course folder :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Chellammal Surianarayanan, Gopinath Ganapathy, Raj Pethuru, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Essentials of Microservices Architecture Paradigms, Applications&lt;/code&gt;, and Techniques, Taylor &amp;amp; Francis; 1st Edition 2019.&lt;/li&gt;
  &lt;li&gt;Poulton, Nigel.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker Deep Dive&lt;/code&gt;. JJNP Consulting Limited, 2018.&lt;/li&gt;
  &lt;li&gt;Nickoloff, Jeff. And Kuenzli, Stephen. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker in action&lt;/code&gt;. Manning Publications Co., 2019.&lt;/li&gt;
  &lt;li&gt;Nickoloff, Jeff.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker in action&lt;/code&gt;. Manning Publications Co., 2016.&lt;/li&gt;
  &lt;li&gt;Miell, Ian, and Aidan Hobson Sayers.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker in practice&lt;/code&gt;. Manning Publications, 2019.&lt;/li&gt;
  &lt;li&gt;Miell, Ian, and Aidan Hobson Sayers.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker in practice&lt;/code&gt;. Manning Publications, 2016.&lt;/li&gt;
  &lt;li&gt;Kane, Sean P., and Karl Matthias.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker: Up &amp;amp; Running: Shipping Reliable Containers in Production&lt;/code&gt;. O‚ÄôReilly Media, 2018.&lt;/li&gt;
  &lt;li&gt;Chelladhurai, Jeeva S., Vinod Singh, and Pethuru Raj.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Learning docker&lt;/code&gt;. Packt Publishing Ltd, 2017.&lt;/li&gt;
  &lt;li&gt;Schenker, Gabriel Nicolas.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Learn Docker-Fundamentals of Docker 19. x.&lt;/code&gt; Packt Publishing, 2020.&lt;/li&gt;
  &lt;li&gt;Richards, Mark. Ford, Neal . &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fundamentals of Software Architecture&lt;/code&gt; (O‚ÄôReilly). 2020.&lt;/li&gt;
  &lt;li&gt;Ingeno, Joseph.¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Software Architect‚Äôs Handbook&lt;/code&gt;. Packt Publishing Ltd, 2018.&lt;/li&gt;
  &lt;li&gt;Michael P. Papazoglou, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web services: Principles and Technology&lt;/code&gt;, Pearson Education Limited, second edition, 2012.&lt;/li&gt;
  &lt;li&gt;Michael P. Papazoglou, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web Services and SOA: Principles and Technology&lt;/code&gt;, 2nd Edition. Prentice Hall, Pearson Education, 2011.&lt;/li&gt;
  &lt;li&gt;Douglas K. Barry, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web Services, Service-Oriented Architectures, and Cloud Computing: The Savvy Manager's Guide&lt;/code&gt;, Morgan Kaufmann; 2nd Edition, 2013.&lt;/li&gt;
  &lt;li&gt;James Bean. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOA and Web Services Interface Design: Principles, Techniques, and Standards&lt;/code&gt;, Morgan Kaufmann Publishers 2010.&lt;/li&gt;
  &lt;li&gt;Steve Graham and Al. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Building Web Services with Java: MAKING SENSE OF XML, SOAP, WSDL, AND UDDI&lt;/code&gt;. Second Edition Sams Publishing; 2nd Edition, 2004.&lt;/li&gt;
  &lt;li&gt;Bogunuva Mohanram Balachandar. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RESTful Java Web Services : A pragmatic guide to designing and building RESTful APIs using Java&lt;/code&gt;. Packt Publishing, third edition 2017.&lt;/li&gt;
&lt;/ol&gt;

&lt;!--You‚Äôll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll‚Äôs GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/--&gt;</content><author><name></name></author><category term="Course" /><category term="update" /><summary type="html">The Web materials and resources of the 2020/2021 Service Oriented Computing (SOC) course at Enicarthage are listed here.</summary></entry></feed>